
find_program(latex_binary latex)
if (NOT ${latex_binary} STREQUAL "latex_binary-NOTFOUND")

  # Generate author list
  file(WRITE authors.texi "")
  file(STRINGS authors.txt _authors)
  file(STRINGS ${CMAKE_CURRENT_BINARY_DIR}/../modules/doc/authors.txt _authors_modules)
  set(_authors_merged ${_authors} ${_authors_modules})
  list(REMOVE_DUPLICATES _authors_merged)
  set(_authors_merged_str "")
  foreach(_author ${_authors_merged})
    string(REPLACE ", " ";" _author ${_author})
    list(REVERSE _author)
    string(REPLACE ";" " " _author "${_author}")
    file(APPEND authors.texi "@author ${_author}\n")
    if ("${_authors_merged_str}" STREQUAL "")
      set(_authors_merged_str "${_author}") 
    else ("${_authors_merged_str}" STREQUAL "")
      set(_authors_merged_str "${_authors_merged_str}, ${_author}") 
    endif ("${_authors_merged_str}" STREQUAL "")
  endforeach ()
  file(APPEND version.texi "@set AUTHORS ${_authors_merged_str}")


  INCLUDE(UseLATEX.cmake)

  set(MANUAL_VERSION "${VERSION}")
  set(MANUAL_AUTHORS "${_authors_merged_str}")

  string(REPLACE ";" "," phaistos_BIB_FILES_FORMATTED "${phaistos_BIB_FILES}")
  if (NOT ${phaistos_BIB_FILES_FORMATTED} STREQUAL "")
    set(phaistos_BIB_FILES_FORMATTED ",${phaistos_BIB_FILES_FORMATTED}")
  endif (NOT ${phaistos_BIB_FILES_FORMATTED} STREQUAL "")


  # # Attempt to run Phaistos --help
  # set(PHAISTOS_HELP_OUTPUT)
  # execute_process(COMMAND "${CMAKE_CURRENT_BINARY_DIR}/../bin/phaistos" "--help" OUTPUT_VARIABLE PHAISTOS_HELP_OUTPUT)
  # # message(STATUS "hello: ${PHAISTOS_HELP_OUTPUT} ${CMAKE_CURRENT_BINARY_DIR}/../bin/phaistos")

  # set(PHAISTOS_HELP_REGEX_MATCHES)
  # # string(REGEX MATCHALL "^([^#])([^:])+:" PHAISTOS_HELP_REGEX_MATCHES ${PHAISTOS_HELP_OUTPUT})
  # # string(REGEX MATCHALL "(^[^\#][^\#].)" PHAISTOS_HELP_REGEX_MATCHES ${PHAISTOS_HELP_OUTPUT})
  # # string(REGEX MATCHALL "\n|[^ ](([^\n])+:\n)|([ ]+--[^\n]+(\n    [^n])*$)" PHAISTOS_HELP_REGEX_MATCHES ${PHAISTOS_HELP_OUTPUT})
  # # string(REGEX MATCHALL "^[^#].+" PHAISTOS_HELP_REGEX_MATCHES ${PHAISTOS_HELP_OUTPUT})
  # string(REPLACE "\n" ";" PHAISTOS_HELP_REGEX_MATCHES ${PHAISTOS_HELP_OUTPUT})
  # # message(STATUS "hello2: ${PHAISTOS_HELP_REGEX_MATCHES}")

  # set(PHAISTOS_HELP_LATEX_OUTPUT "")
  # set(_incomplete_title "")
  # set(_incomplete_entry "")
  # set(_common_prefix "NA")
  # set(_common_prefix_initialized false)
  # foreach(_line ${PHAISTOS_HELP_REGEX_MATCHES})

  #   string(REGEX MATCH "^[^\n]+:$" _line_match ${_line})
  #   if (NOT ${_line_match} STREQUAL "")
  #     # set(PHAISTOS_HELP_LATEX_OUTPUT "${PHAISTOS_HELP_LATEX_OUTPUT}\n\\optiontitle{${_line_match}}")
  #     # set(PHAISTOS_HELP_LATEX_OUTPUT "${PHAISTOS_HELP_LATEX_OUTPUT}\n${_incomplete_entry}\n\\optiontitle{${_line_match}}")      
  #     if (_common_prefix_initialized)
  #       message(STATUS "Common prefix BEFORE: ${_common_prefix}")
  #       string(REPLACE ";" "-" _common_prefix "${_common_prefix}")
  #       message(STATUS "Common prefix AFTER: ${_common_prefix}")
  #       message(STATUS "Incomplete title BEFORE: ${_incomplete_title}")
  #       string(REPLACE "###OPTIONAL_PREFIX" "(${_common_prefix})" _incomplete_title ${_incomplete_title})
  #       message(STATUS "Incomplete title AFTER : ${_incomplete_title}")
  #       string(REPLACE "${_common_prefix}" "" _incomplete_entry ${_incomplete_entry})
  #     else()
  #       message(STATUS "Incomplete title BEFORE: ${_incomplete_title}")
  #       string(REPLACE "###OPTIONAL_PREFIX" "" _incomplete_title "${_incomplete_title}" )
  #       message(STATUS "Incomplete title AFTER : ${_incomplete_title}")
  #     endif()
  #     set(PHAISTOS_HELP_LATEX_OUTPUT "${PHAISTOS_HELP_LATEX_OUTPUT}\n${_incomplete_title}\n${_incomplete_entry}\n")      
  #     set(_incomplete_title "\\optiontitle{${_line_match}###OPTIONAL_PREFIX}")
  #     set(_incomplete_entry "")
  #     set(_common_prefix_initialized false)
  #     set(_common_prefix "NA")
  #   endif()

  #   string(REGEX MATCH "^[ ]+--[^\n]+$" _line_match ${_line})
  #   if (NOT ${_line_match} STREQUAL "")
  #     string(REPLACE "[" "(#" _line ${_line})
  #     string(REPLACE "]" "#)" _line ${_line})
  #     string(STRIP "${_line}" _line)
  #     # message (STATUS "line: ${_line}") 
  #     string(REGEX REPLACE "[ ]+" ";" _line_split ${_line})
  #     # message (STATUS "line_split: ${_line_split}") 
  #     if (NOT ${_incomplete_entry} STREQUAL "")
  #       set(PHAISTOS_HELP_LATEX_OUTPUT "${PHAISTOS_HELP_LATEX_OUTPUT}\n${_incomplete_entry}")      
  #       set(_incomplete_entry "")
  #     endif()
  #     list(GET _line_split 0 _first_element)
  #     set(_reinitialized false)
  #     if ("${_common_prefix}" STREQUAL "NA")
  #       string(REPLACE "--" "" _first_element ${_first_element})        
  #       string(REPLACE "-" ";" _common_prefix ${_first_element})
  #       set(_reinitialized true)
  #     else()
  #       string(REPLACE "--" "" _first_element "${_first_element}")        
  #       string(REPLACE "-" ";" _first_element "${_first_element}")        
  #       list(LENGTH _common_prefix _common_prefix_length)
  #       list(LENGTH _first_element _first_element_length)
  #       # message(STATUS "comparison0 ${_first_element} ${_common_prefix}")
  #       while (_common_prefix_length GREATER 0 AND _common_prefix_length LESS _first_element_length)
  #         # message(STATUS "length ${_first_element_length}")
  #         list(LENGTH _first_element _first_element_length)
  #         math(EXPR _first_element_last_index "${_first_element_length}-1")
  #         # message(STATUS "while: ${_common_prefix_length} ${_first_element_length}")
  #         list(REMOVE_AT _first_element ${_first_element_last_index})
  #         list(LENGTH _first_element _first_element_length)
  #       endwhile()
  #       # message(STATUS "comparison1 ${_first_element} ${_common_prefix}")
  #       while (_common_prefix_length GREATER 0 AND _common_prefix_length GREATER _first_element_length)
  #         # message(STATUS "length ${_first_element_length}")
  #         list(LENGTH _common_prefix _common_prefix_length)
  #         math(EXPR _common_prefix_last_index "${_common_prefix_length}-1")
  #         # message(STATUS "while: ${_common_prefix_length} ${_first_element_length}")
  #         list(REMOVE_AT _common_prefix ${_common_prefix_last_index})
  #         list(LENGTH _common_prefix _common_prefix_length)
  #       endwhile()
  #       # while(NOT "_common_prefix" STREQUAL ${_first_element})
  #       # list(LENGTH _common_prefix _last_index)
  #       # math(EXPR _last_index "${_last_index}-1")
  #       while(_common_prefix_length GREATER 0 AND NOT "${_common_prefix}" STREQUAL "${_first_element}" AND NOT _first_element_last_index LESS 0)
  #         list(LENGTH _common_prefix _common_prefix_length)
  #         list(LENGTH _first_element _first_element_length)
  #         math(EXPR _common_prefix_last_index "${_common_prefix_length}-1")
  #         math(EXPR _first_element_last_index "${_first_element_length}-1")
  #         # message(STATUS "length ${_first_element_length} ${_common_prefix_length}")
  #         # message(STATUS "comparison ${_first_element} ${_common_prefix}")
  #         if (NOT _first_element_last_index LESS 0)
  #           list(REMOVE_AT _first_element ${_first_element_last_index})
  #           list(REMOVE_AT _common_prefix ${_common_prefix_last_index})
  #           # message(STATUS "comparison ${_first_element} ${_common_prefix}")
  #         endif()
  #       endwhile()
  #     endif()

  #     if (NOT _reinitialized AND NOT "${_common_prefix}" STREQUAL "")
  #       set(_common_prefix_initialized true)
  #       # message(STATUS "\n\nPREFIX ${_common_prefix}\n\n")
  #     endif()


  #     # message(STATUS "line_split: ${_first_element}")
  #     foreach(_line_match ${_line_split})
  #       # message (STATUS "    ${_line_match}") 
  #       if (NOT ${_line_match} STREQUAL "arg")
  #         string(REPLACE "(#" "[" _line_match ${_line_match})
  #         string(REPLACE "#)" "]" _line_match ${_line_match})
  #         set(_incomplete_entry "${_incomplete_entry} ${_line_match}")
  #       endif()
  #     endforeach()
  #   endif()

  #   string(REGEX MATCH "^    [^\n]+$" _line_match ${_line})
  #   if (NOT ${_line_match} STREQUAL "")
  #     # message(STATUS "hello: ${_line}")    
  #     string(REGEX REPLACE "^[ ]+" "" _line ${_line})
  #     set(_incomplete_entry "${_incomplete_entry} ${_line}")
  #   endif()
  # endforeach()
  # set(PHAISTOS_HELP_LATEX_OUTPUT "${PHAISTOS_HELP_LATEX_OUTPUT}\n${_incomplete_entry}\n")      
  # message(STATUS "${PHAISTOS_HELP_LATEX_OUTPUT}")    

  add_latex_document(manual.tex
    INPUTS macros.tex ${phaistos_TEX_FILES}
    IMAGES phaistos_logo_noname.pdf
    CONFIGURE macros.tex
    BIBFILES references.bib ${phaistos_BIB_FILES}
    DEFAULT_PDF
    MANGLE_TARGET_NAMES)

  #add_custom_target(manual ALL DEPENDS manual_pdf)
  #add_dependencies(manual.pdf manual_pdf)
  #INSTALL( TARGETS manual.pdf DESTINATION doc )
  INSTALL( FILES ${CMAKE_CURRENT_BINARY_DIR}/manual.pdf DESTINATION doc )

endif (NOT ${latex_binary} STREQUAL "latex_binary-NOTFOUND")



# Doxygen documentation
find_package(Doxygen)
if(DOXYGEN_FOUND)
  # Copy style file
  execute_process(COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_SOURCE_DIR}/doc/DoxygenLayout.xml ${CMAKE_BINARY_DIR}/doc)
  set(phaistos_DOXYGEN_INPUT "${CMAKE_SOURCE_DIR}/src;${CMAKE_SOURCE_DIR}/bin")
  foreach(module_dir ${phaistos_MODULE_DIRS_ACTIVE})
    list(APPEND phaistos_DOXYGEN_INPUT "${CMAKE_SOURCE_DIR}/modules/${module_dir}/src;${CMAKE_SOURCE_DIR}/modules/${module_dir}/bin")
  endforeach(module_dir ${phaistos_MODULE_DIRS_ACTIVE})
  string(REPLACE ";" " " phaistos_DOXYGEN_INPUT "${phaistos_DOXYGEN_INPUT}")
  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
  add_custom_target(doxygen
    ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
    COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
endif(DOXYGEN_FOUND)
